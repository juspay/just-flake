{
  perSystem = { config, pkgs, lib, ... }: {
    options =
      let
        mkFeatureSubmodule = { name, description, justfile }:
          lib.mkOption {
            inherit description;
            default = { };
            type = lib.types.submoduleWith ({
              modules = [
                ./nix/feature.nix
              ];
              specialArgs = {
                inherit name justfile;
                inherit pkgs;
              };
            });
          };
      in
      {
        just-flake.features = {
          treefmt = mkFeatureSubmodule (import ./nix/features/treefmt.nix);
          rust = mkFeatureSubmodule (import ./nix/features/rust.nix);
          convco = mkFeatureSubmodule (import ./nix/features/convco.nix);
        };

        just-flake.commonFileName = lib.mkOption {
          type = lib.types.str;
          default = "just-flake.just";
          description = ''
            The name of the common justfile generated by this module.
          '';
        };

        just-flake.outputs.devShell = lib.mkOption {
          type = lib.types.package;
          readOnly = true;
          description = ''
            The output devShell to include in `inputsFrom`.
          '';
        };
      };
    config =
      let
        cfg = config.just-flake;
        commonJustfile = pkgs.writeTextFile {
          name = "justfile";
          text =
            lib.concatStringsSep "\n"
              (lib.mapAttrsToList (name: feature: feature.outputs.justfile) cfg.features);
        };
      in
      {
        just-flake.outputs.devShell = pkgs.mkShell {
          packages = [ pkgs.just ];
          shellHook = ''
            ln -sf ${builtins.toString commonJustfile} ./${cfg.commonFileName}

            echo
            echo "üçéüçé Run 'just <recipe>' to get started"
            just --list
          '';
        };
      };
  };
}
